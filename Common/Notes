
The light direction has to be relevant to the parent node
Right now


Lights should use the translation : float4x4(translation: skldjf) instead of just a flaot3.
Then i can treat them like model matrixs


// Scene graph - if the car lighting looks weird, its becuase we're moving the lights in GameScene.

// This calculates the flaot3 position of the nodeg
let nodePosition = node.worldTransform.columns.3.xyz

Got claires textures working except the mouth because it should be transparent.
The black parts should be baseColor.a == 0
Works when I check when r == 0, g == 0, b == 0 and then discard fragment
But that .a should come back as 0, so blender is exporting incorreclty or we're interrupting it incorrectly



Try importing a claire with animations and run one of the animations...


Claires textures are backwards compaired to mixamo


claire zup isn't actually right - blender is just rotated 90


IMPORTANT: need to pass along where the texture uv begins -> OBJ is bottom left?
This is in texturable
This is what made the lantern seem to break
Although the car did not?


***** If you get a blue screen thats half black and all fucked up ****
- Its probably because theres a nil texture somewhere in the shaders


When export gltf from blender / Make Human
- Need texture node
- Need images node - Update names
- Need to udpate materials to match the original shit "firstHuman_rigged_1_working_walk"
    - Update i
- If i export a new gltf file - Need to always add this shit


*** BLENDER ***

- mixamo character scaling
- select mesh - right click (or option p) -> clear and keep transformation - parent
- control A - apply transformations
- control p - assign parent Keep transform - to the bones


- Transferring over to using gltfkit


- missing in vertex descriptor

- the ray wend version uses GLTFMakeVertexDescriptor to create and hard set the attributes
- While gltfkit does not so attributes could be missing - and fail out


- GLTFKit doesn't reuse properties like BufferIndexFragment (or whatever) Because he doesn't import any header files in the shader. When creating the source it fails with a fatal error saying it can't find common.h


- I should just rewrite - (MTLVertexDescriptor *)vertexDescriptorForSubmesh:(GLTFSubmesh *)submesh { in the shader builder in swift
- Can use functions constants to set shader stage_in attributes to optional
